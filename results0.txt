Wrote profile results to ex1.py.lprof
Timer unit: 1e-06 s

Total time: 1.2381 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __div__ at line 642

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   642                                               @profile
   643                                               def __div__(self, m):
   644     17039      21952.0      1.3      1.8          if isinstance(m, (bytes, str)):
   645                                                       m = Unit(m)
   646                                           
   647     17039      15401.0      0.9      1.2          if isinstance(m, UnitBase):
   648     17031      62854.0      3.7      5.1              if m.is_unity():
   649         8          2.0      0.2      0.0                  return self
   650     17023    1137391.0     66.8     91.9              return CompositeUnit(1, [self, m], [1, -1], _error_check=False)
   651                                           
   652         8          3.0      0.4      0.0          try:
   653                                                       # Cannot handle this as Unit, re-try as Quantity
   654         8         52.0      6.5      0.0              from .quantity import Quantity
   655         8        443.0     55.4      0.0              return Quantity(1, self) / m
   656                                                   except TypeError:
   657                                                       return NotImplemented

Total time: 0.00036 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __rdiv__ at line 659

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   659                                               @profile
   660                                               def __rdiv__(self, m):
   661         2          4.0      2.0      1.1          if isinstance(m, (bytes, str)):
   662                                                       return Unit(m) / self
   663                                           
   664         2          3.0      1.5      0.8          try:
   665                                                       # Cannot handle this as Unit.  Here, m cannot be a Quantity,
   666                                                       # so we make it into one, fasttracking when it does not have a
   667                                                       # unit, for the common case of <array> / <unit>.
   668         2         20.0     10.0      5.6              from .quantity import Quantity
   669         2          5.0      2.5      1.4              if hasattr(m, 'unit'):
   670                                                           result = Quantity(m)
   671                                                           result /= self
   672                                                           return result
   673                                                       else:
   674         2        328.0    164.0     91.1                  return Quantity(m, self**(-1))
   675                                                   except TypeError:
   676                                                       return NotImplemented

Total time: 0.017997 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __mul__ at line 682

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   682                                               @profile
   683                                               def __mul__(self, m):
   684       106        186.0      1.8      1.0          if isinstance(m, (bytes, str)):
   685                                                       m = Unit(m)
   686                                           
   687       106        127.0      1.2      0.7          if isinstance(m, UnitBase):
   688       105       3564.0     33.9     19.8              if m.is_unity():
   689         2          1.0      0.5      0.0                  return self
   690       103       2689.0     26.1     14.9              elif self.is_unity():
   691                                                           return m
   692       103      11337.0    110.1     63.0              return CompositeUnit(1, [self, m], [1, 1], _error_check=False)
   693                                           
   694                                                   # Cannot handle this as Unit, re-try as Quantity.
   695         1          0.0      0.0      0.0          try:
   696         1          8.0      8.0      0.0              from .quantity import Quantity
   697         1         85.0     85.0      0.5              return Quantity(1, self) * m
   698                                                   except TypeError:
   699                                                       return NotImplemented

Total time: 0.823099 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __rmul__ at line 701

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   701                                               @profile
   702                                               def __rmul__(self, m):
   703     25151      27441.0      1.1      3.3          if isinstance(m, (bytes, str)):
   704                                                       return Unit(m) * self
   705                                           
   706                                                   # Cannot handle this as Unit.  Here, m cannot be a Quantity,
   707                                                   # so we make it into one, fasttracking when it does not have a unit
   708                                                   # for the common case of <array> * <unit>.
   709     25151      13335.0      0.5      1.6          try:
   710     25151     132770.0      5.3     16.1              from .quantity import Quantity
   711     25151      24113.0      1.0      2.9              if hasattr(m, 'unit'):
   712                                                           result = Quantity(m)
   713                                                           result *= self
   714                                                           return result
   715                                                       else:
   716     25151     625440.0     24.9     76.0                  return Quantity(m, self)
   717                                                   except TypeError:
   718                                                       return NotImplemented

Total time: 0.130046 s
File: ex1.py
Function: accel at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def accel(t0, state, k):
    17      7699       9429.0      1.2      7.3      v_vec = state[3:]
    18      7699      87099.0     11.3     67.0      norm_v = (v_vec * v_vec).sum() ** .5
    19      7699      33518.0      4.4     25.8      return 1e-5 * v_vec / norm_v

Total time: 3.5034 s
File: ex1.py
Function: accel_slow at line 21

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    21                                           @profile
    22                                           def accel_slow(t0, state, k):
    23      8343      16315.0      2.0      0.5      r_vec, v_vec = state[:3], state[3:]
    24      8343    1928015.0    231.1     55.0      _k = k * (u.km ** 3 / u.s ** 2)
    25                                               #__ = k * u.km ** 3 / u.s ** 2
    26                                               #___ = k * u.km * u.km * u.km / u.s / u.s
    27      8343      28718.0      3.4      0.8      body = Body(None, _k, "_Dummy")
    28      8343     327152.0     39.2      9.3      _r = r_vec * u.km
    29                                               #__ = v_vec * u.km * u.km
    30      8343    1029632.0    123.4     29.4      _v = v_vec * u.km / u.s
    31      8343      33341.0      4.0      1.0      ss = RVState(body, _r, _v)
    32      8343      87793.0     10.5      2.5      norm_v = (v_vec * v_vec).sum() ** .5
    33      8343      52430.0      6.3      1.5      return 1e-5 * v_vec / norm_v

Total time: 3.96348 s
File: ex1.py
Function: main at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           @profile
    38                                           def main():
    39         1     244068.0 244068.0      6.2      initial.propagate(3 * u.day, method=cowell, ad=accel)
    40         1    3719409.0 3719409.0     93.8      initial.propagate(3 * u.day, method=cowell, ad=accel_slow)


