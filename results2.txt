Wrote profile results to ex1.py.lprof
Timer unit: 1e-06 s

Total time: 2.3298 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __div__ at line 642

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   642                                               @profile
   643                                               def __div__(self, m):
   644     17039      23094.0      1.4      1.0          if isinstance(m, (bytes, str)):
   645                                                       m = Unit(m)
   646                                           
   647     17039      15772.0      0.9      0.7          if isinstance(m, UnitBase):
   648     17031      68858.0      4.0      3.0              if m.is_unity():
   649         8          3.0      0.4      0.0                  return self
   650     17023    2221245.0    130.5     95.3              return CompositeUnit(1, [self, m], [1, -1], _error_check=False)
   651                                           
   652         8          4.0      0.5      0.0          try:
   653                                                       # Cannot handle this as Unit, re-try as Quantity
   654         8         54.0      6.8      0.0              from .quantity import Quantity
   655         8        771.0     96.4      0.0              return Quantity(1, self) / m
   656                                                   except TypeError:
   657                                                       return NotImplemented

Total time: 0.000413 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __rdiv__ at line 659

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   659                                               @profile
   660                                               def __rdiv__(self, m):
   661         2          4.0      2.0      1.0          if isinstance(m, (bytes, str)):
   662                                                       return Unit(m) / self
   663                                           
   664         2          2.0      1.0      0.5          try:
   665                                                       # Cannot handle this as Unit.  Here, m cannot be a Quantity,
   666                                                       # so we make it into one, fasttracking when it does not have a
   667                                                       # unit, for the common case of <array> / <unit>.
   668         2         14.0      7.0      3.4              from .quantity import Quantity
   669         2          2.0      1.0      0.5              if hasattr(m, 'unit'):
   670                                                           result = Quantity(m)
   671                                                           result /= self
   672                                                           return result
   673                                                       else:
   674         2        391.0    195.5     94.7                  return Quantity(m, self**(-1))
   675                                                   except TypeError:
   676                                                       return NotImplemented

Total time: 0.02552 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __mul__ at line 682

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   682                                               @profile
   683                                               def __mul__(self, m):
   684       106        127.0      1.2      0.5          if isinstance(m, (bytes, str)):
   685                                                       m = Unit(m)
   686                                           
   687       106        104.0      1.0      0.4          if isinstance(m, UnitBase):
   688       105       4834.0     46.0     18.9              if m.is_unity():
   689         2          0.0      0.0      0.0                  return self
   690       103       3857.0     37.4     15.1              elif self.is_unity():
   691                                                           return m
   692       103      16465.0    159.9     64.5              return CompositeUnit(1, [self, m], [1, 1], _error_check=False)
   693                                           
   694                                                   # Cannot handle this as Unit, re-try as Quantity.
   695         1          1.0      1.0      0.0          try:
   696         1          7.0      7.0      0.0              from .quantity import Quantity
   697         1        125.0    125.0      0.5              return Quantity(1, self) * m
   698                                                   except TypeError:
   699                                                       return NotImplemented

Total time: 2.01646 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __rmul__ at line 701

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   701                                               @profile
   702                                               def __rmul__(self, m):
   703     25151      26627.0      1.1      1.3          if isinstance(m, (bytes, str)):
   704                                                       return Unit(m) * self
   705                                           
   706                                                   # Cannot handle this as Unit.  Here, m cannot be a Quantity,
   707                                                   # so we make it into one, fasttracking when it does not have a unit
   708                                                   # for the common case of <array> * <unit>.
   709     25151      12396.0      0.5      0.6          try:
   710     25151     155657.0      6.2      7.7              from .quantity import Quantity
   711     25151      26888.0      1.1      1.3              if hasattr(m, 'unit'):
   712                                                           result = Quantity(m)
   713                                                           result *= self
   714                                                           return result
   715                                                       else:
   716     25151    1794893.0     71.4     89.0                  return Quantity(m, self)
   717                                                   except TypeError:
   718                                                       return NotImplemented

Total time: 3.76576 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: __init__ at line 1973

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1973                                               @profile
  1974                                               def __init__(self, scale, bases, powers, decompose=False,
  1975                                                            decompose_bases=set(), _error_check=True):
  1976                                                   # There are many cases internal to astropy.units where we
  1977                                                   # already know that all the bases are Unit objects, and the
  1978                                                   # powers have been validated.  In those cases, we can skip the
  1979                                                   # error checking for performance reasons.  When the private
  1980                                                   # kwarg `_error_check` is False, the error checking is turned
  1981                                                   # off.
  1982     36312      28891.0      0.8      0.8          if _error_check:
  1983     17934      52897.0      2.9      1.4              scale = sanitize_scale(scale)
  1984     35959      27816.0      0.8      0.7              for base in bases:
  1985     18025      21769.0      1.2      0.6                  if not isinstance(base, UnitBase):
  1986                                                               raise TypeError(
  1987                                                                   "bases must be sequence of UnitBase instances")
  1988     17934     148472.0      8.3      3.9              powers = [validate_power(p) for p in powers]
  1989                                           
  1990     36312      32557.0      0.9      0.9          self._scale = scale
  1991     36312      25072.0      0.7      0.7          self._bases = bases
  1992     36312      23754.0      0.7      0.6          self._powers = powers
  1993     36312      25430.0      0.7      0.7          self._decomposed_cache = None
  1994     36312    3346216.0     92.2     88.9          self._expand_and_gather(decompose=decompose, bases=decompose_bases)
  1995     36312      32885.0      0.9      0.9          self._hash = None

Total time: 2.25074 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/core.py
Function: _expand_and_gather at line 2036

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  2036                                               @profile
  2037                                               def _expand_and_gather(self, decompose=False, bases=set()):
  2038     36312      53670.0      1.5      2.4          def add_unit(unit, power, scale):
  2039                                                       if unit not in bases:
  2040                                                           for base in bases:
  2041                                                               try:
  2042                                                                   scale *= unit._to(base) ** power
  2043                                                               except UnitsError:
  2044                                                                   pass
  2045                                                               else:
  2046                                                                   unit = base
  2047                                                                   break
  2048                                           
  2049                                                       if unit in new_parts:
  2050                                                           a, b = resolve_fractions(new_parts[unit], power)
  2051                                                           new_parts[unit] = a + b
  2052                                                       else:
  2053                                                           new_parts[unit] = power
  2054                                                       return scale
  2055                                           
  2056     36312      44554.0      1.2      2.0          new_parts = {}
  2057     36312      62124.0      1.7      2.8          scale = self.scale
  2058                                           
  2059     89840     167450.0      1.9      7.4          for b, p in zip(self.bases, self.powers):
  2060     53528      63269.0      1.2      2.8              if decompose and b not in bases:
  2061      1130       4972.0      4.4      0.2                  b = b.decompose(bases=bases)
  2062                                           
  2063     53528      82298.0      1.5      3.7              if isinstance(b, CompositeUnit):
  2064     18078      30783.0      1.7      1.4                  scale *= b._scale ** p
  2065     37590      55985.0      1.5      2.5                  for b_sub, p_sub in zip(b._bases, b._powers):
  2066     19512     239503.0     12.3     10.6                      a, b = resolve_fractions(p_sub, p)
  2067     19512     187298.0      9.6      8.3                      scale = add_unit(b_sub, a * b, scale)
  2068                                                       else:
  2069     35450     368038.0     10.4     16.4                  scale = add_unit(b, p, scale)
  2070                                           
  2071     36312     107570.0      3.0      4.8          new_parts = [x for x in new_parts.items() if x[1] != 0]
  2072     36312     157741.0      4.3      7.0          new_parts.sort(key=lambda x: (-x[1], getattr(x[0], 'name', '')))
  2073                                           
  2074     36312      84679.0      2.3      3.8          self._bases = [x[0] for x in new_parts]
  2075     36312     410996.0     11.3     18.3          self._powers = [validate_power(x[1]) for x in new_parts]
  2076     36312     129808.0      3.6      5.8          self._scale = sanitize_scale(scale)

Total time: 0.952627 s
File: /home/juanlu/Development/Astropy/astropy-latest/astropy/units/quantity.py
Function: __new__ at line 274

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   274                                               @profile
   275                                               def __new__(cls, value, unit=None, dtype=None, copy=True, order=None,
   276                                                           subok=False, ndmin=0):
   277                                           
   278     25350      34982.0      1.4      3.7          if unit is not None:
   279                                                       # convert unit first, to avoid multiple string->unit conversions
   280     25203      86934.0      3.4      9.1              unit = Unit(unit)
   281                                                       # if we allow subclasses, allow a class from the unit.
   282     25203      29272.0      1.2      3.1              if subok:
   283                                                           qcls = getattr(unit, '_quantity_class', cls)
   284                                                           if issubclass(qcls, cls):
   285                                                               cls = qcls
   286                                           
   287                                                   # optimize speed for Quantity with no dtype given, copy=False
   288     25350      39710.0      1.6      4.2          if isinstance(value, Quantity):
   289       155        175.0      1.1      0.0              if unit is not None and unit is not value.unit:
   290                                                           value = value.to(unit)
   291                                                           # the above already makes a copy (with float dtype)
   292                                                           copy = False
   293                                           
   294       155        214.0      1.4      0.0              if type(value) is not cls and not (subok and
   295                                                                                          isinstance(value, cls)):
   296        10        509.0     50.9      0.1                  value = value.view(cls)
   297                                           
   298       155        172.0      1.1      0.0              if dtype is None:
   299       155        162.0      1.0      0.0                  if not copy:
   300        19         20.0      1.1      0.0                      return value
   301                                           
   302       136        285.0      2.1      0.0                  if not np.can_cast(np.float32, value.dtype):
   303                                                               dtype = float
   304                                           
   305       136        163.0      1.2      0.0              return np.array(value, dtype=dtype, copy=copy, order=order,
   306       136       1409.0     10.4      0.1                              subok=True, ndmin=ndmin)
   307                                           
   308                                                   # Maybe str, or list/tuple of Quantity? If so, this may set value_unit.
   309                                                   # To ensure array remains fast, we short-circuit it.
   310     25195      28646.0      1.1      3.0          value_unit = None
   311     25195      36504.0      1.4      3.8          if not isinstance(value, np.ndarray):
   312      8449      11270.0      1.3      1.2              if isinstance(value, str):
   313                                                           # The first part of the regex string matches any integer/float;
   314                                                           # the second parts adds possible trailing .+-, which will break
   315                                                           # the float function below and ensure things like 1.2.3deg
   316                                                           # will not work.
   317                                                           pattern = (r'\s*[+-]?'
   318                                                                      r'((\d+\.?\d*)|(\.\d+)|([nN][aA][nN])|'
   319                                                                      r'([iI][nN][fF]([iI][nN][iI][tT][yY]){0,1}))'
   320                                                                      r'([eE][+-]?\d+)?'
   321                                                                      r'[.+-]?')
   322                                           
   323                                                           v = re.match(pattern, value)
   324                                                           unit_string = None
   325                                                           try:
   326                                                               value = float(v.group())
   327                                           
   328                                                           except Exception:
   329                                                               raise TypeError('Cannot parse "{0}" as a {1}. It does not '
   330                                                                               'start with a number.'
   331                                                                               .format(value, cls.__name__))
   332                                           
   333                                                           unit_string = v.string[v.end():].strip()
   334                                                           if unit_string:
   335                                                               value_unit = Unit(unit_string)
   336                                                               if unit is None:
   337                                                                   unit = value_unit  # signal no conversion needed below.
   338                                           
   339      8449      39824.0      4.7      4.2              elif (isiterable(value) and len(value) > 0 and
   340         5         26.0      5.2      0.0                    all(isinstance(v, Quantity) for v in value)):
   341                                                           # Convert all quantities to the same unit.
   342                                                           if unit is None:
   343                                                               unit = value[0].unit
   344                                                           value = [q.to_value(unit) for q in value]
   345                                                           value_unit = unit  # signal below that conversion has been done
   346                                           
   347     25195      30439.0      1.2      3.2          if value_unit is None:
   348                                                       # If the value has a `unit` attribute and if not None
   349                                                       # (for Columns with uninitialized unit), treat it like a quantity.
   350     25195      44073.0      1.7      4.6              value_unit = getattr(value, 'unit', None)
   351     25195      28873.0      1.1      3.0              if value_unit is None:
   352                                                           # Default to dimensionless for no (initialized) unit attribute.
   353     25195      29805.0      1.2      3.1                  if unit is None:
   354         1          1.0      1.0      0.0                      unit = cls._default_unit
   355     25195      28904.0      1.1      3.0                  value_unit = unit  # signal below that no conversion is needed
   356                                                       else:
   357                                                           try:
   358                                                               value_unit = Unit(value_unit)
   359                                                           except Exception as exc:
   360                                                               raise TypeError("The unit attribute {0!r} of the input could "
   361                                                                               "not be parsed as an astropy Unit, raising "
   362                                                                               "the following exception:\n{1}"
   363                                                                               .format(value.unit, exc))
   364                                           
   365                                                           if unit is None:
   366                                                               unit = value_unit
   367                                                           elif unit is not value_unit:
   368                                                               copy = False  # copy will be made in conversion at end
   369                                           
   370     25195      33042.0      1.3      3.5          value = np.array(value, dtype=dtype, copy=copy, order=order,
   371     25195     108945.0      4.3     11.4                           subok=False, ndmin=ndmin)
   372                                           
   373                                                   # check that array contains numbers or long int objects
   374     25195      40155.0      1.6      4.2          if (value.dtype.kind in 'OSU' and
   375                                                       not (value.dtype.kind == 'O' and
   376                                                            isinstance(value.item(() if value.ndim == 0 else 0),
   377                                                                       numbers.Number))):
   378                                                       raise TypeError("The value must be a valid Python or "
   379                                                                       "Numpy numeric type.")
   380                                           
   381                                                   # by default, cast any integer, boolean, etc., to float
   382     25195      58416.0      2.3      6.1          if dtype is None and (not np.can_cast(np.float32, value.dtype)
   383     25149      33453.0      1.3      3.5                                or value.dtype.kind == 'O'):
   384        46        180.0      3.9      0.0              value = value.astype(float)
   385                                           
   386     25195      78966.0      3.1      8.3          value = value.view(cls)
   387     25195      69776.0      2.8      7.3          value._set_unit(value_unit)
   388     25195      30668.0      1.2      3.2          if unit is value_unit:
   389     25195      26654.0      1.1      2.8              return value
   390                                                   else:
   391                                                       # here we had non-Quantity input that had a "unit" attribute
   392                                                       # with a unit different from the desired one.  So, convert.
   393                                                       return value.to(unit)

Total time: 0.079 s
File: ex1.py
Function: accel at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def accel(t0, state, k):
    17      8343       7962.0      1.0     10.1      v_vec = state[3:]
    18      8343      40973.0      4.9     51.9      norm_v = (v_vec * v_vec).sum() ** .5
    19      8343      30065.0      3.6     38.1      return 1e-5 * v_vec / norm_v

Total time: 6.68136 s
File: ex1.py
Function: accel_slow at line 21

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    21                                           @profile
    22                                           def accel_slow(t0, state, k):
    23      8343      17977.0      2.2      0.3      r_vec, v_vec = state[:3], state[3:]
    24      8343    3824028.0    458.4     57.2      _k = k * (u.km ** 3 / u.s ** 2)
    25                                               #__ = k * u.km ** 3 / u.s ** 2
    26                                               #___ = k * u.km * u.km * u.km / u.s / u.s
    27      8343      31121.0      3.7      0.5      body = Body(None, _k, "_Dummy")
    28      8343     707802.0     84.8     10.6      _r = r_vec * u.km
    29                                               #__ = v_vec * u.km * u.km
    30      8343    1898490.0    227.6     28.4      _v = v_vec * u.km / u.s
    31      8343      38499.0      4.6      0.6      ss = RVState(body, _r, _v)
    32      8343     103304.0     12.4      1.5      norm_v = (v_vec * v_vec).sum() ** .5
    33      8343      60144.0      7.2      0.9      return 1e-5 * v_vec / norm_v

Total time: 7.1159 s
File: ex1.py
Function: main at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           @profile
    38                                           def main():
    39         1     195008.0 195008.0      2.7      initial.propagate(3 * u.day, method=cowell, ad=accel)
    40         1    6920894.0 6920894.0     97.3      initial.propagate(3 * u.day, method=cowell, ad=accel_slow)

